/*================================================
			Breakpoints
==================================================*/

@mixin bp($screen-width) {
	@if $screen-width == sm {
		@media (max-width: ($sm/16)*1em) {
			@content;
		}
	}
	@if $screen-width == mp {
		@media (max-width: ($mp/16)*1em) {
			@content;
		}
	} @else if $screen-width == ml {
		@media (max-width: ($ml/16)*1em) {
			@content;
		}
	} @else if $screen-width == tp {
		@media (max-width: ($tp/16)*1em) {
			@content;
		}
	} @else if $screen-width == tl {
		@media (max-width: ($tl/16)*1em) {
			@content;
		}
	} @else if $screen-width == dk {
		@media (min-width: ($dk/16)*1em) {
			@content;
		}
	} @else if $screen-width == lg {
		@media (min-width: ($lg/16)*1em) {
			@content;
		}
	}
}

/*================================================
			Clearfix
==================================================*/
@mixin clearfix {
	*zoom: 1;

	&:before,
	&:after {
		content: ' ';
		display: table;
	}

	&:after {
		clear: both;
	}
}

/*================================================
			Responsive Typography
==================================================*/
// Responsive Text ---- sets the range limit for responsive font-size.
// Body: Allows any em based font size to be responsive
// element: allows precise control if you use px or rem
// em units get blown up if responsive text mixin is set at body or root.
@mixin responsive-text(
	$min-font-size,
	$max-font-size,
	$min-vw: $ml,
	$max-vw: $dk
) {
	$min-viewport: ($min-vw / 16) * 1em;
	$max-viewport: ($max-vw / 16) * 1em;

	$responsive-calc: calc(
		#{px-calc($min-font-size)} + (
				#{strip-unit(px-calc($max-font-size))} - #{strip-unit(
						px-calc($min-font-size)
					)}
			) * (100vw - #{px-calc($min-viewport)}) / (#{strip-unit(
						px-calc($max-viewport)
					)} - #{strip-unit(px-calc($min-viewport))})
	);

	font-size: $min-font-size;
	// Min width
	@media screen and (min-width: $min-viewport) {
		font-size: $responsive-calc;
	}

	// Max width
	@media screen and (min-width: $max-viewport) {
		font-size: $max-font-size;
	}
}

// This makes padding and line height responsive

//   line-height:  calc(28px + (38 - 28) * (100vw - 600px) / (1200 - 600));

//   padding: calc(20px + (40 - 20) * (100vw - 600px) / (1200 - 600));

// @media (max-width: 600px) {
//   p {
//     padding: 20px;
//     font-size: 24px;
//     line-height: 28px;

//   }
// }
// @media (min-width: 1200px) {
//   p {
//     padding: 40px;
//     font-size: 34px;
//     line-height: 38px;

//   }
// }

/*================================================
			Misc
==================================================*/
@mixin appearance($none) {
	-webkit-appearance: $none;
	-moz-appearance: $none;
	appearance: $none;
}

@mixin transform-transition($trans-ition) {
	-moz-transition: -moz-transform ($trans-ition);
	-ms-transition: -ms-transform ($trans-ition);
	-webkit-transition: -webkit-transform ($trans-ition);
	-o-transition: -o-transform ($trans-ition);
	transition: transform ($trans-ition);
}

@mixin arrow($direction: down, $size: 5px, $color: #555) {
	width: 0;
	height: 0;
	@if ($direction == left) {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-right: $size solid $color;
	} @else if ($direction == right) {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size solid $color;
	} @else if ($direction == down) {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-top: $size solid $color;
	} @else {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: $size solid $color;
	}
}

/*================================================
Positioning helpers
==================================================*/
@mixin position($position, $args) {
	@each $o in top right bottom left {
		$i: index($args, $o);
		@if $i and
			$i +
			1 <=
			length($args) and
			type-of(nth($args, $i + 1)) ==
			number
		{
			#{$o}: nth($args, $i + 1);
		}
	}
	position: $position;
}

@mixin absolute($args: '') {
	@include position(absolute, $args);
}

@mixin fixed($args: '') {
	@include position(fixed, $args);
}

@mixin relative($args: '') {
	@include position(relative, $args);
}

// image ratio

@mixin img-ratio($width: 16, $height: 9) {
	padding-top: percentage($width / $height);
}
