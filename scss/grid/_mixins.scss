

/*================================================
			Breakpoints
==================================================*/

@mixin bp($screen-width) {
	@if $screen-width == mp {
		@media (max-width: ($mp/16)*1em) { @content ; }
	} 
	@else if $screen-width == ml {
		@media (max-width: ($ml/16)*1em) { @content ; }
	} 
	@else if $screen-width == tp {
		@media (max-width: ($tp/16)*1em) { @content ; }
	} 
	@else if $screen-width == tl {
		@media (max-width: ($tl/16)*1em) { @content ; }
	} 
	@else if $screen-width == dk {
		@media (min-width: ($dk/16)*1em) { @content ; }
	} 
}

@mixin clearfix {
  *zoom: 1;

  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
}


/*================================================
			Responsive Typography
==================================================*/
// Responsive Text ---- all em based font-size is responsive.
@mixin responsive-text($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $responsive-calc: calc(#{px-calc($min-font-size)} + (#{strip-unit(px-calc($max-font-size))} - #{strip-unit(px-calc($min-font-size))}) * (100vw - #{px-calc($min-vw)}) / (#{strip-unit(px-calc($max-vw))} - #{strip-unit(px-calc($min-vw))}));

  // $u1: unit($min-vw);
  // $u2: unit($max-vw);
  // $u3: unit($min-font-size);
  // $u4: unit($max-font-size);

  // @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
  //   & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size:  $responsive-calc;
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
  //   }
  // }
}


// Fluid Text ---- sets the range limit for responsive font-size. DON'T USE EM's. 
// em units get blown up if responsive text mixin is set at body or root.
@mixin fluid-text($min-font-size, $max-font-size, $min-vw: $min_width, $max-vw: $max_width) {
	$responsive-calc: calc(#{px-calc($min-font-size)} + (#{strip-unit(px-calc($max-font-size))} - #{strip-unit(px-calc($min-font-size))}) * (100vw - #{px-calc($min-vw)}) / (#{strip-unit(px-calc($max-vw))} - #{strip-unit(px-calc($min-vw))}));

  font-size: $min-font-size;
   // Min width
  @media screen and (min-width: $min-vw) {
    font-size: $responsive-calc;
  }

  // Max width
  @media screen and (min-width: $max-vw) {
    font-size: $max-font-size;
  }
}


/*================================================
				// Kyle's Mixin
==================================================*/

// Responsive Typography
// "min-font-size-px" + ("max-font-size" - "min-font-size") * (100vw - "min-screen-size-px") / ("max-screen-size" - "min-screen-size")
// @mixin r-font-size($min-font, $max-font, $min-screen: $min-width, $max-screen: $max-width) {
//     $responsive-calc: calc(#{px-calc($min-font)} + (#{strip-units(px-calc($max-font))} - #{strip-units(px-calc($min-font))}) * (100vw - #{px-calc($min-screen)}) / (#{strip-units(px-calc($max-screen))} - #{strip-units(px-calc($min-screen))}));
//     font-size: rem-calc($min-font);

//     // Min width
//     @include bp(min, rem-calc($min-screen)) {
//         font-size: $responsive-calc;
//     }

//     // Halfway point
//     @include bp(min, ((rem-calc($max-screen) + rem-calc($min-screen)) / 2)) {
//         font-size: (rem-calc($max-font) + rem-calc($min-font)) / 2;
//         font-size: $responsive-calc;
//     }

//     // Max width
//     @include bp(min, rem-calc($max-screen)) {
//         font-size: rem-calc($max-font);
//     }
// }

